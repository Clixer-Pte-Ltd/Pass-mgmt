<?php

namespace Tests\Feature;

use App\Imports\SubContructorsImport;
use App\Models\SubConstructor;
use Tests\Feature\Company\CompanyTest;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use App\Imports\TenantsImport;
use App\Imports\SubContructorAccountsImport;
use App\Models\Tenant;

class SubConstructorTest extends CompanyTest
{
    use DatabaseTransactions;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->table = 'sub_constructors';
        $this->baseUri = 'sub-constructor';
    }

    /**
     * test create
     * @group company_sub_constructor_create
     * @test
     * @return void
     */
    public function create()
    {
        $subconstructor = $this->dataCreate = factory(SubConstructor::class)->make();
        $this->dataCheck = $subconstructor->toArray();
        $this->dataCheck['tenancy_start_date'] = $this->dataCheck['tenancy_start_date']->format('Y-m-d');
        $this->dataCheck['tenancy_end_date'] = $this->dataCheck['tenancy_end_date']->format('Y-m-d');
        $this->testCreate();
    }

    /**
     * test update
     * @group company_sub_constructor_update
     * @test
     * @return void
     */
    public function update()
    {
        $subconstructor = factory(SubConstructor::class)->create();
        $this->dataCheck = $this->dataUpdate = factory(SubConstructor::class)->make()->toArray();
        $this->dataUpdate['id'] = $subconstructor->id;
        $this->dataCheck['tenancy_start_date'] = $this->dataCheck['tenancy_start_date']->format('Y-m-d');
        $this->dataCheck['tenancy_end_date'] = $this->dataCheck['tenancy_end_date']->format('Y-m-d');
        $this->testUpdate($subconstructor);
    }

    /**
     * test update
     * @group company_sub_constructor_show
     * @test
     * @return void
     */
    public function show()
    {
        $subconstructor = factory(SubConstructor::class)->create();
        $this->testShow($subconstructor, 'crud::sub-constructor.show');
    }

    /**
     * test delete
     * @group company_sub_constructor_delete
     * @test
     * @return void
     */
    public function delete()
    {
        $subconstructor = factory(SubConstructor::class)->create();
        $this->dataCheck = $subconstructor->toArray();
        $this->dataCheck['tenancy_start_date'] = $this->dataCheck['tenancy_start_date']->format('Y-m-d');
        $this->dataCheck['tenancy_end_date'] = $this->dataCheck['tenancy_end_date']->format('Y-m-d');
        $this->testDelete($subconstructor);
    }

    /**
     * test renew
     * @group company_sub_constructor_renew
     * @test
     * @return void
     */
    public function renew()
    {
        $subconstructor = factory(SubConstructor::class)->create();
        $this->testRenew($subconstructor);
    }

    /**
     * test import
     * @group company_sub_constructor_import
     * @test
     * @return void
     */
    public function import()
    {
        $this->importCompany('tenants.xlsx', Tenant::class, TenantsImport::class);
        $nameFile = 'sub-constructors.xlsx';
        $this->dataCheck = \Excel::toCollection(new SubContructorsImport, $this->prepareFile($nameFile))->toArray()[0];
        $this->testImport($nameFile);
    }

    /**
     * test import account
     * @group company_sub_constructor_import_accounts
     * @test
     * @return void
     */
    public function importAccounts()
    {
        $this->importCompany('tenants.xlsx', Tenant::class, TenantsImport::class);
        $this->importCompany('sub-constructors.xlsx', SubConstructor::class, SubContructorsImport::class);
        $nameFile = 'sub_constructor_accounts.xlsx';
        $this->dataCheck = \Excel::toCollection(new SubContructorAccountsImport, $this->prepareFile($nameFile))->toArray()[0];
        $this->testImportAccounts($nameFile);
    }
}
